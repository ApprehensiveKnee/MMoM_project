
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//     Filename: generate_platelets.lammps
#//     File Type: LAMMPS input script
#//     Description: This script generates a graphite platelet (or a batch of graphite layers) to be later used for MC simlations in LAMMPS.
#//                  The base layer used in the script has been generated from VMD Modeling plugins, to ensure a realistic structure, comprehensive of the ABAB stacking sequence.
#//                  as well as the bounds, angles, dihedrals and improper dihedrals that define the graphite structure.
#//     Author: Edoardo Cabiati
#//     Date: 2024-07-02
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

variable realistic equal "-1"
variable tests equal "0"
variable name string generate_platelets
log simulation_data/log.${name}


units           real                  # Real units: Angstroms, femtoseconds, kcal/mol
dimension       3                     # 3D simulation
atom_style      molecular                  # Define the atom style
boundary        p p p                 # No periodic boundary conditions
pair_style lj/cut 14

# ---------------------------]* C-C POTENTIALS *[----------------------------
# Specify the bond, angle, dihedral, and improper styles for the C-C bonds (potentials) taken from the OPLS-AA force field
bond_style harmonic
angle_style harmonic
dihedral_style opls
improper_style harmonic
special_bonds lj 0.0 0.0 0.5
# ---------------------------]* C-C POTENTIALS *[----------------------------


# Import the variables for the simulation box dimensions
include dimensions.lammps

# Define the number of graphite platelets and corresponding Lz dimension for the simulation box
if "${tests}==1" then "variable max_layers equal 2." &
                    "variable H equal 15" &
                    "variable Lz equal 15" &
                    "print 'Importing restricted.data'" &
                    "read_data templates/restricted.data" & 
                    "jump SELF done_test" 
if "$H != 9 && $H != 15 && $H != 30 && $H != 60" then "print 'Invalid H value. Please use 9, 15, 30, or 60'" &
    "quit"
if "${H} == 9" then "variable max_layers equal 4."  &  
                    "print 'Importing platelet_n4.data'" &
                    "read_data templates/platelet_n4.data" 
if  "${H} == 15"  then "variable max_layers equal 2." &
                    "print 'Importing platelet_n2.data'" &
                    "read_data templates/platelet_n2.data" 
if "${H} == 30" then "variable max_layers equal 1." &
                    "print 'Importing platelet_n1.data'" &
                    "read_data templates/platelet_n1.data" 
if "${H} == 60" then "variable max_layers equal 1." &
                    "print 'Importing platelet_n1.data'" &
                    "read_data templates/platelet_n1.data"  
label done_test
         
# ---------------------------]* C-C POTENTIALS PARAMETERS *[----------------------------

include ../carbonBonds/carbonParameters.lammps

# ---------------------------]* C-C POTENTIALS PARAMETERS *[----------------------------

# *****************************      SETTING UP THE SYSTEM      ******************************

# First, center the platelets
group           carbon_atoms type 1
variable        carbon_xcm equal -1*xcm(carbon_atoms,x)
variable        carbon_ycm equal -1*xcm(carbon_atoms,y)
print          "Center of mass of the platelet: ${carbon_xcm} ${carbon_ycm}"
displace_atoms  carbon_atoms move ${carbon_xcm} ${carbon_ycm} 0


label           setup_loop
# Define the variables for the restucuring of the simulation settings
variable        groups index grp_1 grp_2 grp_3 grp_4
variable        regions index reg_1 reg_2 reg_3 reg_4
variable        a loop ${max_layers}
# For each time the loop is executed, bound the atoms in the successive, stacked layers and
# translate them to the correct position in the simulation box
    variable    quote0 equal 3.35*(v_a-1)
    variable    quote1 equal 3.35*(v_a-1)+0.1
    variable    quote equal -1*${Lz}+$H/2-${quote0}+$H*($a-1)
    region      ${regions} block -${Lx} ${Lx} -${Ly} ${Ly} ${quote0} ${quote1} units box
    group       ${groups} region ${regions}
    displace_atoms ${groups} move 0 0 ${quote} units box
# Next iteration
next            a
next            regions
next            groups
jump            SELF setup_loop

change_box      all x final -${Lx} ${Lx} y final -${Ly} ${Ly} z final -${Lz} ${Lz} units box
if "${tests}==1" then "change_box all x final -12.5 12.5 y final -12.5 12.5 z final -${Lz} ${Lz} units box"
reset_atoms     id sort yes



# *****************************      EQUILIBRATION RUN      ******************************

thermo 500
thermo_style custom step pe ke etotal temp lx ly lz press atoms
timestep 1

# Minimize at 0K will likely not be necessary, so we skip it

# Start from hight temperature and cool down the system
variable        T equal 298
variable        Tstart equal 600
if "${realistic} ==-1 && ${tests}==0" then "dump final_dump all atom 100 simulation_data/final.lammpstrj" &
                                    "jump SELF equilibration"
if "${realistic} ==-1 && ${tests}==1" then "dump final_dump all atom 100 simulation_data/test.lammpstrj" &
                                    "jump SELF equilibration"                  
velocity        all create ${Tstart} 48455 mom yes rot yes # give initial velocities to the inner atoms
fix             nvt1 all nvt temp ${Tstart} ${T} $(125.0*dt)
# Set up the output files schema
variable myvol equal vol
variable mylx equal lx
variable myly equal ly
variable mylz equal lz
variable mypot equal pe
variable mytemp equal temp
fix           myat1 all ave/time 10 10 100 v_mytemp file simulation_data/temperature_inner.dat
fix           myat2 all ave/time 10 10 100 v_myvol v_mylx v_myly v_mylz file simulation_data/dimensions.dat
fix           myat3 all ave/time 10 10 100 v_mypot file simulation_data/potential_energy.dat

if "${realistic} ==0" then "fix myspr all spring/self 5" &
                           "jump SELF spring_nvt "

# To avoid the planes of the platelets movement during the simulation, fix thier CM and momentums
label           fix_loop
variable        groups delete
variable        groups index grp_1 grp_2 grp_3 grp_4
variable        b loop ${max_layers}
    print       "${b}"
    print       "${groups}"
    variable    quote0 equal 3.35*(v_b-1)
    variable    quote equal -1*${Lz}+$H/2-${quote0}+$H*($b-1)
    #fix         recenter_fix_${b} ${groups} recenter NULL NULL INIT units box
    fix         momentum_fix_${b} ${groups} momentum  100 linear 0 0 1 angular rescale   
next            b
next            groups
jump            SELF fix_loop

label           spring_nvt
if "${tests}==1" then "dump final_dump all atom 100 simulation_data/test.lammpstrj" &
                        "jump SELF skip_dump"
dump            final_dump all atom 100 simulation_data/final.lammpstrj
label           skip_dump
run 10000
if "${realistic} ==0" then "jump SELF equilibration"

unfix           nvt1
label           unfix_loop
variable        groups delete
variable        groups index grp_1 grp_2 grp_3 grp_4
variable        c loop ${max_layers}
    #unfix       recenter_fix_${c}
    unfix       momentum_fix_${c}
next            c
next            groups
jump            SELF unfix_loop

# After the NVT run, run a batch of minimiazation steps.
label           equilibration
minimize        1.0e-4 1.0e-6 10 10
velocity        all create ${T} 123456 dist gaussian
run 500
minimize        1.0e-4 1.0e-6 10 10
velocity        all create ${T} 1234567 dist gaussian
run 500
minimize        1.0e-4 1.0e-6 10 10
velocity        all create ${T} 12345678 dist gaussian
run 500

if "${tests}==1" then "write_data simulation_data/test.data nocoeff nofix" &
                      "quit"
write_data      simulation_data/final.data nocoeff nofix